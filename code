import pandas as pd
import matplotlib.pyplot as plt
import streamlit as st
import pydeck as pdk

# Streamlit Application
st.title("Boston Airbnb Data Analysis")
st.sidebar.header("Upload CSV Files")

# Upload files using Streamlit's file uploader
listings_file = st.sidebar.file_uploader("Upload 'listings.csv'", type=["csv"])
neighbourhoods_file = st.sidebar.file_uploader("Upload 'neighbourhoods.csv'", type=["csv"])
reviews_file = st.sidebar.file_uploader("Upload 'reviews.csv'", type=["csv"])

# Check if files are uploaded
if listings_file and neighbourhoods_file and reviews_file:
    # Read the files into pandas DataFrames with encoding specified
    listings = pd.read_csv(listings_file, encoding='utf-8')
    neighbourhoods = pd.read_csv(neighbourhoods_file, encoding='utf-8')
    reviews = pd.read_csv(reviews_file, encoding='utf-8')

    # Display dataset samples
    st.subheader("Dataset Samples")
    st.write("Listings:", listings.head())
    st.write("Neighbourhoods:", neighbourhoods.head())
    st.write("Reviews:", reviews.head())

    # Clean and manipulate data [DA1, DA7]
    listings['price'] = listings['price'].replace('[\$,]', '', regex=True).astype(float)

    # Function to filter data by price range and neighborhood [PY1]
    def filter_data(data, price_min=0, price_max=500, neighborhood=None):
        filtered = data[(data['price'] >= price_min) & (data['price'] <= price_max)]
        if neighborhood:
            filtered = filtered[filtered['neighbourhood'] == neighborhood]
        return filtered, filtered['price'].mean(), len(filtered)

    # Example of filtering data [DA4, DA5]
    st.sidebar.subheader("Filter Listings")
    min_price = st.sidebar.slider("Minimum Price", 0, 1000, 50)
    max_price = st.sidebar.slider("Maximum Price", 0, 1000, 500)
    selected_neighborhood = st.sidebar.selectbox(
        "Select Neighborhood", ["All"] + list(listings['neighbourhood'].unique())
    )

    filtered_data, avg_price, count = filter_data(
        listings, min_price, max_price, None if selected_neighborhood == "All" else selected_neighborhood
    )

    st.write(f"Average Price: ${avg_price:.2f} ({count} listings found)")

    # Visualization: Bar chart of average prices by neighborhood [VIZ1]
    st.subheader("Average Prices by Neighborhood")
    avg_prices = listings.groupby('neighbourhood')['price'].mean().sort_values()
    st.bar_chart(avg_prices)

    # Visualization: Pie chart of listings by room type [VIZ2]
    st.subheader("Room Type Distribution")
    room_type_counts = listings['room_type'].value_counts()
    fig, ax = plt.subplots()
    ax.pie(room_type_counts, labels=room_type_counts.index, autopct='%1.1f%%', startangle=90)
    st.pyplot(fig)

    # Map Visualization: Listings locations [MAP]
    st.subheader("Listings Map")
    st.pydeck_chart(pdk.Deck(
        map_style='mapbox://styles/mapbox/light-v9',
        initial_view_state=pdk.ViewState(
            latitude=listings['latitude'].mean(),
            longitude=listings['longitude'].mean(),
            zoom=12,
            pitch=50
        ),
        layers=[
            pdk.Layer(
                'ScatterplotLayer',
                data=listings,
                get_position='[longitude, latitude]',
                get_color='[200, 30, 0, 160]',
                get_radius=100,
            )
        ]
    ))

    # Summary statistics [DA9]
    st.subheader("Summary Statistics")
    st.write(listings[['price', 'minimum_nights', 'number_of_reviews']].describe())

else:
    st.warning("Please upload all required CSV files to proceed.")
